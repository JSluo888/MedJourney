{"extracted_information": "TEN Framework是一个开源生态系统，用于创建、定制和部署具有语音、视觉和虚拟形象等多模态功能的实时对话式AI代理。", "specifications": {"overall_description": "TEN是一个全面的开源生态系统，用于创建、定制和部署具有语音、视觉和虚拟形象等多模态功能的实时对话式AI代理。", "components": [{"name": "TEN Framework", "description": "实时多模态对话式AI的开源框架。"}, {"name": "TEN Turn Detection", "description": "用于全双工对话通信。"}, {"name": "TEN VAD", "description": "低延迟、轻量级和高性能的流式语音活动检测器（VAD）。"}, {"name": "TEN Agent", "description": "TEN Framework的展示案例。"}, {"name": "TMAN Designer", "description": "一个低/无代码选项，通过易于使用的流程UI创建语音代理。它可以加载应用程序和图表，并包含在线编辑器、日志查看器等功能。"}, {"name": "TEN Portal", "description": "TEN Framework的官方网站，包含文档和博客。"}]}, "features": [{"name": "实时虚拟形象", "description": "使用TEN Agent结合Trulience的免费虚拟形象集合构建引人入胜的AI虚拟形象。", "integration_steps": ["按照README完成Playground的设置和运行。", "输入从Trulience获取的虚拟形象ID和令牌。"]}, {"name": "与MCP服务器的实时语音", "description": "TEN Agent与MCP服务器无缝集成，扩展了其LLM功能。", "integration_steps": ["在Playground中打开模块选择器。", "添加MCP服务器工具以集成LLM。", "在扩展中粘贴MCP服务器的URL。", "与TEN Agent开始实时对话。"]}, {"name": "与硬件的实时通信", "description": "TEN Agent现在可以在Espressif ESP32-S3 Korvo V3开发板上运行，这是将LLM与硬件进行实时通信的优秀方式。", "integration_guide_link": "https://github.com/TEN-framework/ten-framework/tree/main/ai_agents/esp32-client"}, {"name": "实时视觉和实时屏幕共享检测", "description": "试用Google Gemini多模态实时API，它具有实时视觉和实时屏幕共享检测功能，是一个即用型扩展，并完美集成了天气查询和网页搜索等强大工具到TEN Agent中。"}, {"name": "TEN与其他LLM平台集成", "description": "TEN提供对Dify等其他LLM平台更好的实时交互体验支持。", "integration_guide_link": "https://theten.ai/docs/ten_agent/playground/use-cases/voice-assistant/run_dify"}, {"name": "StoryTeller - TEN图像生成", "description": "通过StoryTeller体验实时图像生成，这是一个即用型扩展，并完美集成了天气查询和网页搜索等强大工具到TEN中。"}], "integration_guides": {"run_ten_agent_in_localhost": {"prerequisites": {"keys": ["Agora App ID和App Certificate（每月免费分钟数）", "OpenAI API Key（任何与OpenAI兼容的LLM）", "Deepgram ASR（注册后有免费积分）", "Elevenlabs TTS（注册后有免费积分）"], "installation": ["Docker / Docker Compose", "Node.js (LTS) v18"], "minimum_system_requirements": {"cpu": ">= 2 Core", "ram": ">= 4 GB"}, "macos_docker_setting_note": "在Docker设置中取消勾选“Use Rosetta for x86/amd64 emulation”，以避免在ARM架构上导致较慢的构建时间。"}, "steps_to_build_agent_in_vm": ["克隆仓库，`cd`到`ai_agents`目录并从`.env.example`创建`.env`文件：`cd ai_agents`，`cp ./.env.example ./.env`。", "在`.env`文件中设置Agora App ID和App Certificate：`AGORA_APP_ID=`，`AGORA_APP_CERTIFICATE=`。", "启动代理开发容器：`docker compose up -d`。", "进入容器：`docker exec -it ten_agent_dev bash`。", "使用默认`graph`构建代理（约5-8分钟），或使用demo代理：`task use`或`task use AGENT=agents/examples/demo`。", "启动web服务器：`task run`。"], "customize_with_tman_designer": ["打开`localhost:49483`。", "右键单击以加载相应的图表（例如，语音助手）。", "输入API密钥并设置每个扩展的首选项。", "右键单击并选择`Run`以启动代理。"]}, "run_ten_agent_in_codespace": {"description": "GitHub为每个仓库提供免费Codespace，您可以在Codespace中运行Playground而无需使用Docker，且速度比本地更快。", "guide_link": "https://theten.ai/docs/ten_agent/setup_development_env/setting_up_development_inside_codespace"}, "ten_agent_self_hosting": {"deploying_with_docker": {"description": "定制代理后（通过TMAN Manager、Playground或直接编辑`property.json`），可以通过为服务创建发布Docker镜像来部署它。", "deployment_guide_link": "https://theten.ai/docs/ten_agent/deploy_ten_agent/deploy_agent_service"}, "deploying_with_other_cloud_services": "即将推出"}}}